#include <dt-bindings/zmk/mouse.h>
#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };

        ht_greenatom: ht_greenatom {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_GREENATOM";
            bindings = <&greenatom>, <&bluetooth_macro_1>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
        };

        ht_greenatom_aszi: ht_greenatom_aszi {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_GREENATOM_ASZI";
            bindings = <&greenatom_aszi>, <&dongle_macro>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
        };

        triple_dot_to_ellipsis: triple_dot_to_ellipsis {
            compatible = "zmk,behavior-tap-dance";
            label = "TRIPLE_DOT_TO_ELLIPSIS";
            #binding-cells = <0>;
            bindings = <&kp RA(PERIOD)>, <&none>, <&kp RA(NUMBER_2)>;
        };

        double_space_to_dot: double_space_to_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_SPACE_TO_DOT";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp RA(PERIOD)>;
        };

        backspace_to_navigation_layer: backspace_to_navigation_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE_TO_NAVIGATION_LAYER";
            #binding-cells = <0>;
            bindings = <&lt 1 BACKSPACE>, <&kp BACKSPACE>;
        };
    };

    macros {
        sleep_macro: sleep_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(D) &kp LA(F4) &kp UP_ARROW &kp ENTER>;
            label = "SLEEP_MACRO";
            wait-ms = <350>;
        };

        dongle_macro: dongle_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_USB>;
            label = "DONGLE_MACRO";
        };

        bluetooth_macro_1: bluetooth_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &out OUT_BLE>;
            label = "BLUETOOTH_MACRO_1";
        };

        bluetooth_macro_2: bluetooth_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &out OUT_BLE>;
            label = "BLUETOOTH_MACRO_2";
        };

        switch_language: switch_language {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_ALT)>;
            label = "SWITCH_LANGUAGE";
        };

        greenatom: greenatom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(G) &kp R &kp E &kp E &kp N &kp A &kp T &kp O &kp M &kp LS(G) &kp R &kp EXCL &kp G &kp O &kp R &kp Y &kp NUMBER_3 &kp ENTER>;
            label = "GREENATOM";
        };

        greenatom_aszi: greenatom_aszi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(G) &kp LS(A) &kp LS(N) &kp A &kp D &kp O &kp L &kp I &kp N &kp S &kp K &kp Y &kp TAB &greenatom>;
            label = "GREENATOM_ASZI";
        };
    };

    combos {
        compatible = "zmk,combos";

        changing_the_language {
            bindings = <&switch_language>;
            key-positions = <16 12 13 17>;
            layers = <0>;
        };

        bootloader_combo {
            bindings = <&bootloader>;
            key-positions = <6 7 8 9>;
            layers = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            bindings = <
       &kp Q           &kp W           &kp E        &kp R             &ht RA(T) T             &kp Y      &kp U                           &ht RA(I) I  &kp O           &kp P
       &ht LEFT_WIN A  &ht LEFT_ALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &kp G                   &kp H      &ht LEFT_SHIFT J                &ht LCTRL K  &ht LEFT_ALT L  &ht LEFT_WIN SEMICOLON
&none  &kp Z           &kp X           &kp C        &kp V             &kp B                   &kp N      &ht RA(M) M                     &kp COMMA    &kp PERIOD      &kp SLASH               &none
                                       &kp ESCAPE   &lt 2 TAB         &double_space_to_dot    &kp ENTER  &backspace_to_navigation_layer  &mo 5
            >;
        };

        navigation_layer {
            bindings = <
        &kp HOME      &kp LC(LEFT)      &kp UP_ARROW    &kp LC(RIGHT)      &kp PAGE_UP      &kp PLUS   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_MULTIPLY
        &kp CAPSLOCK  &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp PAGE_DOWN    &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_DIVIDE
&trans  &kp END       &kp LS(LC(LEFT))  &none           &kp LS(LC(RIGHT))  &kp INSERT       &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0     &trans
                                        &trans          &mo 3              &trans           &none      &none         &none
            >;
        };

        symbol_layer {
            bindings = <
       &kp RA(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &ht LS(N5) LS(NUMBER_6)    &kp RA(BACKSLASH)  &kp RA(LEFT_BRACKET)      &kp RA(RIGHT_BRACKET)      &kp RA(LS(SEMICOLON))  &kp RA(SINGLE_QUOTE)
       &kp BACKSLASH     &kp LS(NUMBER_8)  &kp MINUS         &kp LS(EQUAL)     &kp EQUAL                  &kp LS(NUMBER_7)   &kp LS(NUMBER_9)          &kp LS(NUMBER_0)           &kp RA(SEMICOLON)      &kp RA(LS(APOSTROPHE))
&none  &kp RA(MINUS)     &kp LS(NUMBER_1)  &kp RA(SLASH)     &kp RA(COMMA)     &triple_dot_to_ellipsis    &kp LS(MINUS)      &kp RA(LS(LEFT_BRACKET))  &kp RA(LS(RIGHT_BRACKET))  &kp RA(LS(COMMA))      &kp RA(LS(PERIOD))      &none
                                           &none             &none             &none                      &trans             &lt 3 DELETE              &none
            >;
        };

        function_layer {
            bindings = <
       &kp F1  &kp F2   &kp F3   &kp F4   &kp C_BRIGHTNESS_INC    &kp C_VOLUME_UP    &kp C_PREVIOUS     &kp C_PLAY_PAUSE    &kp C_NEXT              &none
       &kp F5  &kp F6   &kp F7   &kp F8   &kp C_BRIGHTNESS_DEC    &kp C_VOLUME_DOWN  &kp LEFT_SHIFT     &kp LCTRL           &kp LEFT_ALT            &kp LEFT_WIN
&none  &kp F9  &kp F10  &kp F11  &kp F12  &mo 4                   &kp C_MUTE         &ht_greenatom 0 0  &bluetooth_macro_2  &ht_greenatom_aszi 0 0  &none         &none
                        &none    &none    &none                   &none              &none              &none
            >;
        };

        system_layer {
            bindings = <
       &none  &none  &none  &none  &none    &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &none  &none
       &none  &none  &none  &none  &none    &bt BT_CLR      &ind_bat      &ind_con      &none  &none
&none  &none  &none  &none  &none  &none    &none           &none         &none         &none  &none  &none
                     &none  &none  &none    &none           &none         &none
            >;
        };

        mouse_layer {
            bindings = <
       &none  &none           &mmv MOVE_UP    &none            &none    &none  &none           &msc SCRL_UP    &none            &none
       &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none    &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none
&none  &none  &mkp MCLK       &mkp RCLK       &mkp LCLK        &none    &none  &mkp LCLK       &mkp RCLK       &mkp MCLK        &none  &none
                              &none           &none            &none    &none  &none           &none
            >;
        };
    };
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <3>;
};

&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <1>;
    acceleration-exponent = <3>;
};
